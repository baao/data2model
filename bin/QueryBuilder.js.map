{"version":3,"sources":["QueryBuilder.es6"],"names":[],"mappings":"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","file":"QueryBuilder.js","sourcesContent":["/**\n * data2model\n * Author: michael\n * Date: 06.09.15.\n * License: MIT\n */\nimport dotenv from 'dotenv';\ndotenv.load();\nimport mysql from 'mysql';\nconst pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    connectionLimit: 50,\n    queueLimit: 100,\n    multipleStatements: true,\n    flags: ['LOCAL_FILES'],\n    charset: 'utf8_unicode_ci'\n});\n\nimport Promise from 'bluebird';\nimport _log from 'deep-logger';\nconst log = _log.deepLogger;\nimport repeatStr from 'repeat-string';\n\nfunction QueryError(message) {\n    this.message = message;\n    this.name = \"QueryError\";\n    Error.captureStackTrace(this, QueryError);\n}\nQueryError.prototype = Object.create(Error.prototype);\nQueryError.prototype.constructor = QueryError;\n\nfunction CheckFunctionFailedError(message) {\n    this.message = message;\n    this.name = \"CheckFunctionFailedError\";\n    Error.captureStackTrace(this, CheckFunctionFailedError);\n}\nCheckFunctionFailedError.prototype = Object.create(Error.prototype);\nCheckFunctionFailedError.prototype.constructor = CheckFunctionFailedError;\n\nPromise.promisifyAll(mysql);\nPromise.promisifyAll(require(\"mysql/lib/Connection\").prototype);\nPromise.promisifyAll(require(\"mysql/lib/Pool\").prototype);\nString.prototype.ucFirst = function () {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n};\nclass Connection {\n    constructor(database, options = {}) {\n        this.database = database;\n        this.options = Object.assign({\n            shouldQueryNow: false\n        }, options);\n        this.operators = {}\n    }\n\n    getConnection() {\n        return pool.getConnectionAsync().then(connection => connection\n        ).then(con => {\n                con.changeUser({\n                    database: this.database\n                });\n                return con;\n            });\n    }\n\n    query(query) {\n        return this.getConnection().then(con => {\n            return con.queryAsync(query).spread((res, table) => {\n                con.release();\n                return res;\n            }).catch(err => {\n                throw new QueryError(err.code)\n            });\n        })\n    }\n\n    transactionQuery(query, runChecks) {\n        let commiter = con => {\n            con.commit(err => {\n                if (err) {\n                    con.rollback();\n                }\n            });\n            if (runChecks && runChecks.needTemporaryTable && runChecks.timing == 'functionsAfterParse') {\n                return con.query(this.drop('temp_' + runChecks.table), (err, res) => {\n                });\n            }\n            con.release();\n        };\n        return this.getConnection().then(con => {\n            return con.queryAsync('START TRANSACTION;' + query).spread((res, table) => {\n                if (typeof runChecks == 'object' && runChecks.runChecks) {\n                    this[runChecks.runChecks]('temp_' + runChecks.table, runChecks.table).then(val => {\n                        if (!val) {\n                            throw new CheckFunctionFailedError();\n                        }\n                        commiter(con);\n                    }).catch(CheckFunctionFailedError, () => {\n                        con.query(this.rollback(runChecks.savePoint), (err, res)=> {\n                            con.query(this.drop('temp_' + runChecks.table), (err, res) => {\n                            });\n                        });\n                        con.release();\n                    }).catch(err => (err));\n                } else {\n                    commiter(con);\n                }\n            }).catch(err => {\n                con.rollback(() => {\n                    throw new QueryError(err);\n                });\n            });\n        }).catch(err => (err));\n    }\n\n    shouldQueryNow(query) {\n        if (this.options.shouldQueryNow) {\n            return this.query(query);\n        }\n        return query;\n    }\n\n    showColumns(table) {\n        return this.shouldQueryNow(mysql.format(`SHOW COLUMNS FROM ??;`, [table]))\n    }\n\n    showTables() {\n        return this.shouldQueryNow(mysql.format(`SHOW TABLES FROM ??;`, [this.database]));\n    }\n\n    truncate(table) {\n        return this.shouldQueryNow(mysql.format(`TRUNCATE ??`, [table]));\n    }\n\n    drop(table) {\n        return this.shouldQueryNow(mysql.format(`DROP TABLE IF EXISTS ??`, [table]));\n    }\n\n    rollback(to) {\n        return 'ROLLBACK ' + (to ? 'TO ' + to : '');\n    }\n\n    select(table, options) {\n        let statement = `SELECT `;\n        if (options instanceof Map && options.has('select')) {\n            statement += repeatStr('??,', Array.from(options.get('select')).length).replace(/(,)$/, '') + ' FROM ?? ';\n        } else {\n            statement += '*  FROM ?? ';\n        }\n        return this.statementBase(table, options, statement).then(val => {\n            return this.shouldQueryNow(val)\n        });\n    }\n\n    update(table, options) {\n        let statement = `UPDATE ?? SET `;\n        statement += repeatStr(' ?? = ?,', options.get('update').size).replace(/(,)$/, ' ');\n\n        return this.statementBase(table, options, statement).then(val => {\n\n            return this.shouldQueryNow(val)\n        });\n    }\n\n    createTable(table, fieldsOrLike, options = {}) {\n        options = Object.assign({\n            checkIfExists: true,\n            addTimestamps: true,\n            type: 'innodb'\n        }, options);\n\n        return Promise.resolve(\n            `CREATE TABLE ${options.checkIfExists ? 'IF NOT EXISTS' : ''} ?? ${typeof fieldsOrLike == 'string' ? 'LIKE ' + '??' : '('}`\n        ).then(query => {\n                let params = [];\n                if (typeof fieldsOrLike == \"string\") {\n                    params.push(table, fieldsOrLike);\n                } else {\n                    params.push(table);\n                }\n                if (typeof fieldsOrLike != 'string') {\n                    query += '`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,';\n                    if (options.addTimestamps) {\n                        query += '`created_at` TIMESTAMP DEFAULT NOW(),';\n                        query += '`updated_at` TIMESTAMP,';\n                    }\n                    for (let [key,val] of fieldsOrLike.entries()) {\n                        query += '?? ' + val + ',';\n                        params.push(key);\n                    }\n                }\n                return [query.replace(/(,)$/, '') + (typeof fieldsOrLike == 'string' ? '' : ') ENGINE = ' + options.type.toUpperCase()), params];\n            }).spread((query, params) => {\n\n                return this.shouldQueryNow(mysql.format(query, params));\n            });\n    }\n\n    createTableIfNotExists(table, fieldsOrLike, options = {checkIfExists: true}) {\n        return this.createTable(table, fieldsOrLike, options);\n    }\n\n    copyTableData(from, to, fields, options = {}) {\n        options = Object.assign({\n            onDuplicateKeyUpdate: []\n        }, options);\n\n        return Promise.resolve(`INSERT INTO ?? (\\`created_at\\`, \\`updated_at\\`, ${repeatStr('??,', Array.from(fields.keys()).length).replace(/(,)$/, '')}) SELECT NOW(), NOW(), ${repeatStr('??,', Array.from(fields.keys()).length).replace(/(,)$/, '')} FROM ?? ${options.onDuplicateKeyUpdate ? 'ON DUPLICATE KEY UPDATE \\`updated_at\\` = NOW()' : ''}`\n        ).then(query => {\n                let params = [to];\n                for (let key of fields.keys()) {\n                    params.push(key);\n                }\n                for (let value of fields.values()) {\n                    params.push(value)\n                }\n                params.push(from);\n                return [query, params];\n            }).spread((query, params) => {\n                if (options.onDuplicateKeyUpdate && options.onDuplicateKeyUpdate.length == 0) {\n                    for (let key of fields.keys()) {\n                        query += `,??=VALUES(??)`;\n                        params.push(key, key);\n                    }\n                }\n                if (options.onDuplicateKeyUpdate && options.onDuplicateKeyUpdate.length > 0) {\n                    options.onDuplicateKeyUpdate.forEach(val => {\n                        query += `,??=VALUES(??)`;\n                        params.push(val, val);\n                    })\n                }\n                return this.shouldQueryNow(mysql.format(query, params));\n            })\n    }\n\n    createStatements(table, options, val) {\n        let values = new Map();\n        let baseArr = [table];\n        if (options instanceof Map && options.has('select')) {\n            Array.from(options.get('select')).forEach(data => baseArr.unshift(data));\n            options.delete('select');\n        }\n        if (options instanceof Map && options.has('update')) {\n            for (let [k,v] of options.get('update')) {\n                baseArr.push(k, v);\n            }\n            options.delete('update');\n        }\n        if (options instanceof Map && options.size > 0) {\n            for (let [key,value] of options.entries()) {\n                values.set(key, this[`build${key.ucFirst()}`](value));\n            }\n        }\n        return [val, values, baseArr];\n    }\n\n    statementBase(table, options, statement) {\n        return Promise.resolve(statement).then(val => {\n            return this.createStatements(table, options, val);\n        }).spread((statement, values, baseArr) => {\n            return this.buildWhereStatement(statement, baseArr, values);\n        }).spread((statement, values) => {\n            return mysql.format(statement, values).replace(/\\s+/, ' ');\n        });\n    }\n\n    compareTableCount(table1, table2) {\n        return this.query(mysql.format('SELECT COUNT(a.id) as counter FROM ?? as a UNION ALL SELECT COUNT(b.id) as counter FROM ?? as b', [table1, table2])).spread((table1, table2) => {\n            return table1.counter * 2 >= table2.counter;\n        });\n    }\n\n    rm(table, options) {\n        let statement = `DELETE FROM ?? `;\n        return this.statementBase(table, options, statement).then(val=>this.shouldQueryNow(val));\n    }\n\n    rmCompareNotIn(deletionTable, compareTable, fieldsToCompare, options = {}) {\n        options = Object.assign({\n            inOrNot: 'NOT IN'\n        }, options);\n        return Promise.resolve(`DELETE FROM ?? WHERE ?? ${options.inOrNot} (SELECT ?? FROM ??)`).then(stmt => {\n            let arr = [deletionTable, Array.from(fieldsToCompare.keys())[0], Array.from(fieldsToCompare.values())[0], compareTable];\n            return this.shouldQueryNow(mysql.format(stmt, arr));\n        })\n    }\n\n    buildWhereStatement(...val) {\n        if (val[2].size > 0) {\n            val[0] += 'WHERE 1=1';\n            for (let [key,value] of val[2]) {\n                val[0] += ~key.indexOf('or') ? ' OR ' + value[0] : ' AND ' + value[0];\n                value[1].forEach(d => {\n                    val[1].push(d)\n                });\n            }\n        }\n        return [val[0].replace(/1=1 \\w+/, ''), val[1]];\n    }\n\n    buildOrWhereIn(data, options = {compare: 'or'}) {\n        return this.buildWhereIn(data, options);\n    }\n\n    buildWhereNotIn(data, options = {\n        compare: 'AND',\n        inOrNot: 'NOT IN'\n    }) {\n        return this.buildWhereIn(data, options)\n    }\n\n    buildWhereIn(data, options = {\n        compare: 'AND',\n        inOrNot: 'IN'\n    }) {\n        let arr = [];\n        let stmt = ' ?? ' + options.inOrNot + ' (';\n        for (let [key,value] of data.entries()) {\n            arr.push(key);\n            value.forEach(val => {\n                stmt += '?,';\n                arr.push(val)\n            });\n            stmt = stmt.replace(/,$/, ') ' + options.compare + ' ?? ' + options.inOrNot + ' (');\n        }\n        stmt = stmt.replace(/ (AND|IN) \\?\\? (IN|NOT IN) \\($/ig, '');\n        return [stmt, arr]\n    }\n\n    buildOrWhere(data, options = {\n        compareDeep: 'or',\n        equality: '=',\n        compare: 'or'\n    }) {\n        return this.buildWhere(data, options);\n    }\n\n    buildWhereNot(data, options = {\n        compareDeep: 'or',\n        equality: '!=',\n        compare: 'and'\n    }) {\n        return this.buildWhere(data, options);\n    }\n\n    buildWhere(data, options = {\n        compareDeep: 'or',\n        equality: '=',\n        compare: 'and'\n    }) {\n        let values = new Map();\n        let entries = [];\n        let tmp = [];\n        let compare = options.compareDeep;\n        let i = 0;\n        for (let [key,value] of data.entries()) {\n            if (value instanceof Array) {\n                entries.push('(' + value.map((val, i)=> {\n                        tmp.push(key, val);\n                        return ['??', options.equality, '?'].join(' ')\n                    }).join(' ' + compare + ' ') + ')');\n            } else {\n                tmp.push(key, value);\n                entries.push(' ?? ' + options.equality + ' ? ');\n            }\n            i++;\n            if (i == data.size) {\n                values.set(entries.join(' ' + options.compare + ' '), tmp);\n            }\n        }\n\n        return [Array.from(values.keys()).join(' ' + options.compare + ' '), tmp];\n    }\n\n    loadDataInfileString(file, table, cs, ss, options = {}) {\n        options = Object.assign({}, options);\n        return Promise.resolve(`LOAD DATA LOCAL INFILE \"${file}\" INTO TABLE ${table} CHARACTER SET ${options.encoding} FIELDS TERMINATED BY '${options.delimiter}' ENCLOSED BY '${options.enclosedBy}' IGNORE 1 LINES (${cs})` + (ss != '' ? ` SET ${ss}` : '')).then(val=>this.shouldQueryNow(val));\n    }\n\n    insert(table, fields, options = {onDuplicateKeyUpdate: false}) {\n        return this.upsert(table, fields, options);\n    }\n\n    upsert(table, fields, options = {onDuplicateKeyUpdate: []}) {\n        let columnLength = Array.from(fields.get(0).values()).length,\n            statement = `INSERT INTO ${table} (${repeatStr('??,', columnLength).slice(0, -1)})`;\n\n        return Promise.resolve(statement)\n            .then(statement => {\n                statement += ` VALUES (`;\n                for (let i = 1; i <= fields.size; i++) {\n                    statement += `${repeatStr('?,', columnLength).slice(0, -1)}`;\n                    statement += `${(i == fields.size ? ')' : '),(')}`\n                }\n                return statement;\n            }).then(statement => {\n                if (options.onDuplicateKeyUpdate instanceof Array) {\n                    statement = `${statement} ON DUPLICATE KEY UPDATE ${repeatStr('??=VALUES(??),', (options.onDuplicateKeyUpdate.length == 0 ? columnLength - 1 : options.onDuplicateKeyUpdate.length - 1)).slice(0, -1)}`;\n                }\n                return statement;\n            }).then(statement => {\n                return [statement, this.createValueArray(fields, {onDuplicateKeyUpdate: options.onDuplicateKeyUpdate})];\n            }).spread((statement, values) => {\n                return this.shouldQueryNow(mysql.format(statement, values));\n            });\n    }\n\n    createValueArray(fields, options) {\n        let valueArray = Array.from(fields.get(0).keys());\n        for (let res of fields.values()) {\n            for (let rows of res.values()) {\n                valueArray.push(rows)\n            }\n        }\n        if (options.onDuplicateKeyUpdate instanceof Array) {\n            let filler = options.onDuplicateKeyUpdate.length == 0 ? Array.from(fields.get(0).keys()) : options.onDuplicateKeyUpdate;\n\n            for (let row of filler) {\n                for (let i = 0; i < 2; i++) {\n                    if (row != 'created_at') valueArray.push(row);\n                }\n            }\n        }\n        return valueArray;\n    }\n}\n\nexport default Connection;\n\n"]}