{"version":3,"sources":["Csv2Model.es6"],"names":[],"mappings":";;;;;;AAMA,YAAY,CAAC;;;;;;;;AACb,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,CAAC;AACzB,IAAM,GAAG,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,UAAU,CAAC;AAC9C,IAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3B,IAAM,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACpC,IAAM,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;AACrD,IAAM,UAAU,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC9C,IAAM,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC;AAC/C,IAAM,kBAAkB,GAAG,UAAU,CAAC,kBAAkB,CAAC;AACzD,IAAM,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC;AAC3C,IAAM,OAAO,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACzC,IAAM,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC;;IAEzB,SAAS;AACA,aADT,SAAS,CACC,OAAO,EAAE;8BADnB,SAAS;;AAEP,YAAI,CAAC,OAAO,EAAE;AACV,mBAAO,GAAG,EAAE,CAAC;SAChB;AACD,YAAI,CAAC,IAAI,GAAG,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;AACnC,YAAI,CAAC,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC;AAC/B,YAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;AACzB,qBAAS,EAAE,IAAI;AACf,sBAAU,EAAE,IAAI;AAChB,sBAAU,EAAE,IAAI;AAChB,oBAAQ,EAAE,MAAM;AAChB,oBAAQ,EAAE,KAAK;AACf,qBAAS,EAAE,CAAC;AACZ,0BAAc,EAAE,KAAK;SACxB,EAAE,OAAO,CAAC,CAAC;;AAEZ,YAAI,CAAC,OAAO,CAAC,UAAU,GAAG,KAAK,CAAC;KACnC;;iBAlBC,SAAS;;eAoBH,kBAAC,QAAQ,EAAE,IAAI,EAAE;AACrB,mBAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,kBAAkB,CAAC,OAAO,GAAG,GAAG,GAAG,QAAQ,CAAC,CAAC,CAClE,IAAI,CAAC,UAAA,IAAI,EAAI;AACV,oBAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;aACnB,CAAC,CAAC;SACV;;;eAEI,iBAAG;;;AACJ,mBAAO,OAAO,OAAI,CAAC,YAAM;AACrB,oBAAI,CAAC,MAAK,IAAI,IAAI,CAAC,MAAK,SAAS,EAAE;AAC/B,wBAAI,QAAQ,GAAG,MAAK,SAAS,GAAG,iBAAiB,GAAG,mBAAmB,CAAC;AACxE,0BAAM,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAA;iBAClC;AACD,oBAAI;AACA,2BAAO,MAAM,cAAY,MAAK,SAAS,CAAG,CAAA;iBAC7C,CAAC,OAAO,CAAC,EAAE,EACX;aACJ,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK,EAAI;AACb,oBAAI,OAAO,KAAK,IAAI,UAAU,EAAE;AAC5B,wBAAI,OAAO,GAAG;AACV,gCAAQ,EAAE,MAAK,OAAO,CAAC,QAAQ;AAC/B,sCAAc,EAAE,MAAK,OAAO,CAAC,cAAc;qBAC9C,CAAC;AACF,0BAAK,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;AAChC,wBAAI,MAAK,KAAK,CAAC,oBAAoB,EAAE;AACjC,8BAAK,iBAAiB,CAAC;AACnB,iCAAK,EAAE,MAAK,OAAO,CAAC,KAAK,IAAI,MAAK,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;AACpE,kCAAM,EAAE,sBAAsB;yBACjC,CAAC,CAAC;qBACN;AACD,2BAAO,IAAI,CAAC;iBACf;AACD,sBAAM,IAAI,kBAAkB,gBAAc,MAAK,SAAS,qBAAkB,CAAA;aAC7E,CAAC,CAAC,IAAI,CAAC,YAAM;AACV,oBAAI,MAAK,KAAK,CAAC,SAAS,IAAI,OAAO,MAAK,KAAK,CAAC,SAAS,CAAC,MAAK,OAAO,CAAC,SAAS,CAAC,IAAI,QAAQ,EAAE;AACzF,2BAAO,MAAK,KAAK,CAAC,SAAS,CAAC,MAAK,OAAO,CAAC,SAAS,CAAC,CAC9C,KAAK,CAAC,MAAK,OAAO,CAAC,SAAS,CAAC,CAC7B,GAAG,CAAC,UAAA,GAAG;+BAAI,GAAG,CAAC,IAAI,EAAE;qBAAA,CAAC,CAAC;iBAC/B,MAAM;AACH,2BAAO,EAAE,CAAC,aAAa,CAAC,MAAK,IAAI,CAAC,CAC7B,IAAI,CAAC,UAAA,GAAG;+BAAI,GAAG,CAAC,QAAQ,EAAE,CACtB,KAAK,CAAC,MAAK,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CACjC,KAAK,CAAC,MAAK,OAAO,CAAC,SAAS,CAAC,CAC7B,GAAG,CAAC,UAAA,GAAG;mCAAI,GAAG,CAAC,IAAI,EAAE;yBAAA,CAAC;qBAAA,CAC9B,CAAC;iBACL;aACJ,CAAC,CAAC,IAAI,CAAC,UAAA,SAAS,EAAI;AACjB,oBAAI,MAAM,GAAG,IAAI,GAAG,EAAE;oBAClB,MAAM,GAAG,SAAS,CAAC,MAAM;oBACzB,SAAS,GAAG,IAAI,GAAG,EAAE;oBACrB,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;AACvB,sBAAM,CAAC,IAAI,CAAC,MAAK,KAAK,CAAC,OAAO,CAAC,CAC1B,MAAM,CAAC,UAAA,GAAG;2BAAK,MAAK,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,MAAK,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,IAAI,MAAK,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM;iBAAC,CAAC,CACvH,OAAO,CAAC,UAAA,GAAG,EAAI;AACZ,wBAAI,OAAO,GAAG,MAAK,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC;wBACjC,UAAU,GAAG,MAAM,CAAC;AACxB,2BAAO,CAAC,IAAI,GAAG,GAAG,CAAC;AACnB,2BAAO,CAAC,cAAc,GAAG,EAAE,CAAC;AAC5B,wBAAI,OAAO,CAAC,KAAK,KAAK,OAAO,MAAK,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,MAAK,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAA,AAAC,IAAK,MAAK,OAAO,CAAC,QAAQ,YAAY,KAAK,IAAI,CAAC,MAAK,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,AAAC,EAAE;AAClL,kCAAU,GAAG,OAAO,CAAC;qBACxB;AACD,wBAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE;AACzC,+BAAO,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;AACzD,+BAAO,CAAC,cAAc,GAAG,OAAO,CAAC,YAAY,GAAG,GAAG,GAAG,EAAE,CAAC;AACzD,+BAAO,CAAC,MAAM,GAAG,OAAO,CAAC,YAAY,GAAG,GAAG,GAAG,KAAK,CAAC;AACpD,4BAAI,OAAO,CAAC,MAAM,EAAE;AAChB,kCAAM,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,GAAG,GAAG,CAAC,CAAC;yBAC5C;AACD,iCAAS,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,cAAc,GAAG,GAAG,CAAC,CAAC;qBAChE,MAAM;AACH,4BAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AACtB,gCAAI,OAAO,CAAC,YAAY,EAAE;AACtB,uCAAO,CAAC,MAAM,GAAG,GAAG,CAAC;AACrB,sCAAM,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,GAAG,GAAG,CAAC,CAAC;6BAC5C,MAAM;AACH,oCAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AACtB,0CAAM,IAAI,aAAa,CAAC,GAAG,GAAG,gBAAgB,CAAC,CAAA;iCAClD,MAAM;AACH,0CAAM,IAAI,aAAa,CAAC,qBAAqB,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAA;iCACvE;6BACJ;yBACJ;qBACJ;AACD,0BAAM,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,GAAG,GAAG,EAAE,OAAO,CAAC,CAAC;iBACrD,CAAC,CAAC;AACP,uBAAO,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;aAC9C,CAAC,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAK;AACtC,oBAAI,UAAU,GAAG,IAAI,GAAG,EAAE;oBACtB,aAAa,YAAA;oBACb,UAAU,GAAG,EAAE,CAAC;;;;;;AACpB,yCAAsB,MAAK,aAAa,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,8HAAE;;;4BAA9C,CAAC;4BAAC,KAAK;;AACb,kCAAU,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;qBAC9D;;;;;;;;;;;;;;;;AACD,6BAAa,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAC1C,QAAQ,EAAE,CACV,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;;;;;;;AAEhC,0CAAgB,IAAI,CAAC,IAAI,EAAE,mIAAE;4BAApB,GAAG;;AACR,kCAAU,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,IACnC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,YAAY,GAC1B,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,YAAY,GAAG,KAAK,CAAA,AAAC,GACzC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,CAAE,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,KAAK,CAAA,AAAC,CAAC;qBAChK;;;;;;;;;;;;;;;;AACD,0BAAU,GAAG,UAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;AAC9C,uBAAO,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;aACtC,CAAC,CAAC,MAAM,CAAC,UAAC,EAAE,EAAE,EAAE,EAAK;AAClB,uBAAO,OAAO,CAAC,OAAO,CAAC,MAAK,iBAAiB,CAAC;AAC1C,wBAAI,EAAE,MAAK,IAAI;AACf,yBAAK,EAAE,MAAK,OAAO,CAAC,KAAK,IAAI,MAAK,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;AACpE,0BAAM,EAAE,qBAAqB;AAC7B,sBAAE,EAAE,EAAE;AACN,sBAAE,EAAE,EAAE;iBACT,CAAC,CAAC,CAAC;aACP,CAAC,SACQ,CAAC,aAAa,EAAE,UAAA,GAAG;uBAAI,GAAG,CAAC,GAAG,CAAC;aAAA,CAAC,SAChC,CAAC,kBAAkB,EAAE,UAAA,GAAG;uBAAI,GAAG,CAAC,GAAG,CAAC;aAAA,CAAC,SACrC,CAAC,WAAW,EAAE,UAAA,GAAG;uBAAI,GAAG,CAAC,GAAG,CAAC;aAAA,CAAC,SAC9B,CAAC,KAAK,EAAE,UAAA,GAAG;uBAAI,GAAG,CAAC,GAAG,CAAC;aAAA,CAAC,CAAA;SACrC;;;eAEgB,2BAAC,OAAO,EAAE;;;AACvB,gBAAI,CAAC,OAAO,EAAE;AACV,uBAAO,GAAG,EAAE,CAAA;aACf;AACD,mBAAO,GAAG,MAAM,CAAC,MAAM,CAAC;AACpB,uBAAO,EAAE;AACL,4BAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE;AAC7C,6BAAS,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;AAClC,8BAAU,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;iBACtC;AACD,kCAAkB,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB;aACpD,EAAE,OAAO,CAAC,CAAC;AACZ,mBAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,UAAC,CAAC,EAAK;AACnD,uBAAK,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG,EAAI;AAC7C,wBAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;AAChB,+BAAK,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AACvC,iCAAK,EAAE,OAAO,CAAC,KAAK;AACpB,qCAAS,EAAE,OAAK,KAAK,CAAC,uBAAuB;AAC7C,qCAAS,EAAE,OAAK,KAAK,CAAC,SAAS;AAC/B,8CAAkB,EAAE,OAAO,CAAC,kBAAkB;AAC9C,kCAAM,EAAE,OAAO,CAAC,MAAM;yBACzB,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG;mCAAI,GAAG;yBAAA,CAAC,CAAC;qBACvB,MAAM;AACH,+BAAK,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG;mCAAI,GAAG;yBAAA,CAAC,CAAC;qBACrD;iBACJ,CAAC,CAAC;aACN,CAAC,CAAC;SACN;;;uCAEa,uBAAC,KAAK,EAAE,GAAG,EAAE,IAAI;;;;8BACpB,KAAK,GAAG,GAAG,CAAA;;;;;;+BACR,CAAC,KAAK,EAAE,QAAQ,CAAC;;;AACvB,6BAAK,IAAI,IAAI,CAAC;;;;;;;;;SAErB;;;WA9KC,SAAS;;;AAiLf,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC","file":"Csv2Model.js","sourcesContent":["/**\n * data2model\n * Author: michael\n * Date: 11.09.15.\n * License: MIT\n */\n'use strict';\nrequire('dotenv').load();\nconst log = require('deep-logger').deepLogger;\nconst sax = require('sax');\nconst Promise = require('bluebird');\nconst fs = Promise.promisifyAll(require('fs-extra'));\nconst Exceptions = require('./Exceptions.js');\nconst NotFoundError = Exceptions.NotFoundError;\nconst ModelNotFoundError = Exceptions.ModelNotFoundError;\nconst NoInputFile = Exceptions.NoInputFile;\nconst appRoot = require('app-root-path');\nconst reqLib = appRoot.require;\n\nclass Csv2Model {\n    constructor(options) {\n        if (!options) {\n            options = {};\n        }\n        this.file = appRoot + options.file;\n        this.loadModel = options.model;\n        this.options = Object.assign({\n            delimiter: '\\t',\n            lineEnding: '\\n',\n            enclosedBy: '\\\"',\n            encoding: 'utf8',\n            useAlias: false,\n            useHeader: 0,\n            shouldQueryNow: false\n        }, options);\n        // TODO: DELIMITER\n        this.options._delimiter = '\\\\t';\n    }\n\n    saveFile(fileName, data) {\n        return Promise.resolve(fs.createOutputStream(appRoot + '/' + fileName))\n            .then(file => {\n                file.write(data)\n            });\n    }\n\n    parse() {\n        return Promise.try(() => {\n            if (!this.file || !this.loadModel) {\n                let errorMsg = this.loadModel ? 'No csv selected' : 'No model selected';\n                throw new NoInputFile(errorMsg)\n            }\n            try {\n                return reqLib(`/models/${this.loadModel}`)\n            } catch (e) {\n            }\n        }).then(model => {\n            if (typeof model == 'function') {\n                let options = {\n                    database: this.options.database,\n                    shouldQueryNow: this.options.shouldQueryNow\n                };\n                this.model = new model(options);\n                if (this.model.functionsBeforeParse) {\n                    this.runModelFunctions({\n                        table: this.options.table || this.loadModel.replace('-compiled', ''),\n                        timing: 'functionsBeforeParse'\n                    });\n                }\n                return true;\n            }\n            throw new ModelNotFoundError(`The model ${this.loadModel} was not found!`)\n        }).then(() => {\n            if (this.model.firstLine && typeof this.model.firstLine[this.options.useHeader] == 'string') {\n                return this.model.firstLine[this.options.useHeader]\n                    .split(this.options.delimiter)\n                    .map(val => val.trim());\n            } else {\n                return fs.readFileAsync(this.file)\n                    .then(val => val.toString()\n                        .split(this.options.lineEnding)[0]\n                        .split(this.options.delimiter)\n                        .map(val => val.trim())\n                );\n            }\n        }).then(firstLine => {\n            let result = new Map(),\n                length = firstLine.length,\n                insertMap = new Map(),\n                setSet = new Set();\n            Object.keys(this.model.columns)\n                .filter(val => (this.model.columns[val].find || this.model.columns[val].defaultValue || this.model.columns[val].equals))\n                .forEach(val => {\n                    let options = this.model.columns[val],\n                        findOption = 'find';\n                    options.name = val;\n                    options.shouldVariable = '';\n                    if (options.alias && (typeof this.options.useAlias == 'boolean' && this.options.useAlias == true) || (this.options.useAlias instanceof Array && ~this.options.useAlias.indexOf(val))) {\n                        findOption = 'alias';\n                    }\n                    if (~firstLine.indexOf(options[findOption])) {\n                        options.indexes = firstLine.indexOf(options[findOption]);\n                        options.shouldVariable = options.valueOptions ? '@' : '';\n                        options.addSet = options.valueOptions ? val : false;\n                        if (options.addSet) {\n                            setSet.add(options.shouldVariable + val);\n                        }\n                        insertMap.set(options.indexes, options.shouldVariable + val);\n                    } else {\n                        if (!options[findOption]) {\n                            if (options.defaultValue) {\n                                options.addSet = val;\n                                setSet.add(options.shouldVariable + val);\n                            } else {\n                                if (!options[findOption]) {\n                                    throw new NotFoundError(val + ' has no finder')\n                                } else {\n                                    throw new NotFoundError('No index found for ' + options[findOption])\n                                }\n                            }\n                        }\n                    }\n                    result.set(options.shouldVariable + val, options);\n                });\n            return [result, insertMap, setSet, length];\n        }).spread((res, inserts, sets, length) => {\n            let insertsMap = new Map(),\n                columnsString,\n                setsString = '';\n            for (let [i,field] of this.getQueryDummy(0, length, 1)) {\n                insertsMap.set(i, inserts.has(i) ? inserts.get(i) : field);\n            }\n            columnsString = Array.from(insertsMap.values())\n                .toString()\n                .replace(/(,@dummy)+$/, '');\n\n            for (let key of sets.keys()) {\n                setsString += key.replace('@', '') + '=' +\n                    (res.get(key).defaultValue ?\n                    '\"' + (res.get(key).defaultValue + '\", ') :\n                    (Object.keys(res.get(key).valueOptions)[0] + '(' + res.get(key).valueOptions[Object.keys(res.get(key).valueOptions)[0]]).replace(/(:\\w+)/, key) + '), ');\n            }\n            setsString = setsString.replace(/(, )+$/, '');\n            return [columnsString, setsString];\n        }).spread((cs, ss) => {\n            return Promise.resolve(this.runModelFunctions({\n                file: this.file,\n                table: this.options.table || this.loadModel.replace('-compiled', ''),\n                timing: 'functionsAfterParse',\n                cs: cs,\n                ss: ss\n            }));\n        })\n            .catch(NotFoundError, err => log(err))\n            .catch(ModelNotFoundError, err => log(err))\n            .catch(NoInputFile, err => log(err))\n            .catch(Error, err => log(err))\n    }\n\n    runModelFunctions(options) {\n        if (!options) {\n            options = {}\n        }\n        options = Object.assign({\n            options: {\n                encoding: this.options.encoding.toUpperCase(),\n                delimiter: this.options._delimiter,\n                enclosedBy: this.options.enclosedBy\n            },\n            needTemporaryTable: this.model.needTemporaryTable\n        }, options);\n        return Promise.each(this.model[options.timing], (v) => {\n            this.model._getFunctions(v)(options).then(val => {\n                if (val.length > 1) {\n                    this.model.transactionQuery(val.join(';'), {\n                        table: options.table,\n                        runChecks: this.model.checkFunctionAfterParse,\n                        savePoint: this.model.savePoint,\n                        needTemporaryTable: options.needTemporaryTable,\n                        timing: options.timing\n                    }).then(res => res);\n                } else {\n                    this.model.query(val.toString()).then(res => res);\n                }\n            });\n        });\n    }\n\n    *getQueryDummy(start, end, step) {\n        while (start < end) {\n            yield [start, '@dummy'];\n            start += step;\n        }\n    }\n}\n\nmodule.exports = Csv2Model;"]}