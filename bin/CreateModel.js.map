{"version":3,"sources":["CreateModel.es6"],"names":[],"mappings":"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","file":"CreateModel.js","sourcesContent":["/**\n * data2model\n * Author: michael\n * Date: 18.09.15.\n * License: MIT\n */\n\"use strict\";\nconst inquirer = require(\"inquirer\");\nconst Promise = require('bluebird');\nconst log = require('deep-logger').deepLogger;\nconst QueryBuilder = require('./QueryBuilder.js');\nconst _redis = require('redis');\nconst redis = _redis.createClient({db:10});\nconst fs = Promise.promisifyAll(require('fs-extra'));\nconst ModelCreator = require('./ModelCreator.js');\nPromise.promisifyAll(require('redis'));\n\nclass CreateModel {\n    constructor(options) {\n        if (!options) options = {};\n        this.answers = new Map();\n        this.options = Object.assign({\n            createdAt: 'created_at',\n            updatedAt: 'updated_at'\n        }, options);\n    }\n\n\n    chooseDatabase() {\n        return redis.smembersAsync('modelCreator_database').then(val => {\n            if (val.length == 0) {\n                return [\n                    {\n                        type: \"input\",\n                        name: \"database\",\n                        message: \"Which database to use?\"\n                    }\n                ]\n            }\n\n                return [\n                    {\n                        type: \"list\",\n                        name: \"database\",\n                        message: \"Which database to use?\",\n                        choices: val\n\n                    },\n                    {\n                        type: \"input\",\n                        name: \"databaseOther\",\n                        message: \"create new database\",\n                        when: function (answers) {\n                            return answers.database == '- other -';\n                        }\n                    }\n                ];\n        }).then(data => {\n            inquirer.prompt(data, answers => {\n                this.con = new QueryBuilder((answers.databaseOther || answers.database), {shouldQueryNow: true});\n                redis.saddAsync('modelCreator_database', (answers.databaseOther || answers.database));\n                this.con.showTables().then(val => {\n                    return val.map(v => v['Tables_in_' + (answers.databaseOther || answers.database)])\n                }).then(data => {\n                    let questions = [\n                        {\n                            type: \"list\",\n                            choices: data,\n                            message: \"Which table to use?\",\n                            name: \"table\"\n                        }\n                    ];\n                    inquirer.prompt(questions, answers => {\n                        this.con.showColumns(answers.table).then(columns => {\n                            this.answers.set('_tableName_', answers.table);\n                            let choices = [];\n                            columns.forEach(col => {\n                                this.answers.set(col.Field, new Map());\n\n                                if (col.Key != 'PRI' && !~[this.options.createdAt, this.options.updatedAt].indexOf(col.Field)) {\n                                    choices.push(col.Field);\n                                } else {\n                                    if (col.Key == 'PRI') {\n                                        this.answers.get(col.Field).set('exclude', true);\n                                    }\n                                    if (col.Default) {\n                                        this.answers.get(col.Field).set('defaultValue', `${'new Date().toISOString()'}`);\n                                    }\n                                }\n                            });\n                            return choices;\n                        }).then(data => {\n                            let questions = [\n                                {\n                                    type: \"checkbox\",\n                                    choices: data,\n                                    message: \"Which columns to find in csv/xml?\",\n                                    name: \"find\",\n                                    required: true\n                                }\n                            ];\n                            inquirer.prompt(questions, answers => {\n                                let question = [];\n                                answers.find.forEach(val => {\n                                    question.push({\n                                        name: val,\n                                        type: 'input',\n                                        message: `Which heading/tag in csv/xml for ${val}?`,\n                                        default: val\n                                    });\n                                });\n                                inquirer.prompt(question, answers => {\n                                    Object.keys(answers).forEach(val => {\n                                        this.answers.get(val).set('find', answers[val]);\n                                    });\n                                    return this.createFileFromAnswers();\n                                })\n                            });\n                        })\n                    })\n                })\n            })\n        });\n\n    }\n\n    createFileFromAnswers() {\n        let answers = this.answers;\n        let creator = new ModelCreator(answers);\n    }\n}\nnew CreateModel().chooseDatabase();\nexport default CreateModel;"]}